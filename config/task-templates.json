{
  "taskTemplates": {
    "frontend": {
      "title": "前端開發任務指南",
      "content": "# Cursor Programming Assistant Interaction Guidelines\n\n## 1. Basic Response Principles\n\n1. **Language Requirement**: Always respond and comment in Traditional Chinese (繁體中文)\n2. **Code Comments**: Add Traditional Chinese (繁體中文) comments to important code lines explaining functionality\n3. **Direct Implementation**: Provide complete functional implementations, avoid using TODO or placeholders\n4. **Real Data**: Use actual variable and function names from the project, no fake data\n5. **Real-time Response**: Work with Cursor's instant completion features to provide quick and accurate suggestions\n\n## 2. Code Completion and Suggestions\n\n1. **Complete Functions**: Provide complete function implementations rather than partial code snippets\n2. **Logic Completeness**: Ensure completed code logic is complete and directly usable\n3. **Context Understanding**: Provide relevant code suggestions based on current file context\n4. **Variable Consistency**: Use existing variable and function naming styles from the file\n5. **Real-time Optimization**: Perform basic code optimization while completing\n\n## 3. Error Handling and Quality\n\n1. **Basic Error Handling**: Include necessary try-catch blocks or conditional checks\n2. **Boundary Conditions**: Consider common edge cases (null, undefined, empty arrays, etc.)\n3. **Type Safety**: Provide appropriate type annotations in type-supported languages\n4. **Performance Considerations**: Avoid obvious performance issues (infinite loops, memory leaks, etc.)"
    },
    "backend": {
      "title": "後端開發任務指南",
      "content": "# Cursor Programming Assistant Interaction Guidelines\n\n## 1. Basic Response Principles\n\n1. **Language Requirement**: Always respond and comment in Traditional Chinese (繁體中文)\n2. **Code Comments**: Add Traditional Chinese (繁體中文) comments to important code lines explaining functionality\n3. **Direct Implementation**: Provide complete functional implementations, avoid using TODO or placeholders\n4. **Real Data**: Use actual variable and function names from the project, no fake data\n5. **Real-time Response**: Work with Cursor's instant completion features to provide quick and accurate suggestions\n\n## 2. Code Completion and Suggestions\n\n1. **Complete Functions**: Provide complete function implementations rather than partial code snippets\n2. **Logic Completeness**: Ensure completed code logic is complete and directly usable\n3. **Context Understanding**: Provide relevant code suggestions based on current file context\n4. **Variable Consistency**: Use existing variable and function naming styles from the file\n5. **Real-time Optimization**: Perform basic code optimization while completing\n\n## 3. Error Handling and Quality\n\n1. **Basic Error Handling**: Include necessary try-catch blocks or conditional checks\n2. **Boundary Conditions**: Consider common edge cases (null, undefined, empty arrays, etc.)\n3. **Type Safety**: Provide appropriate type annotations in type-supported languages\n4. **Performance Considerations**: Avoid obvious performance issues (infinite loops, memory leaks, etc.)"
    },
    "fullstack": {
      "title": "全端開發任務指南",
      "content": "# Cursor Programming Assistant Interaction Guidelines\n\n## 1. Basic Response Principles\n\n1. **Language Requirement**: Always respond and comment in Traditional Chinese (繁體中文)\n2. **Code Comments**: Add Traditional Chinese (繁體中文) comments to important code lines explaining functionality\n3. **Direct Implementation**: Provide complete functional implementations, avoid using TODO or placeholders\n4. **Real Data**: Use actual variable and function names from the project, no fake data\n5. **Real-time Response**: Work with Cursor's instant completion features to provide quick and accurate suggestions\n\n## 2. Code Completion and Suggestions\n\n1. **Complete Functions**: Provide complete function implementations rather than partial code snippets\n2. **Logic Completeness**: Ensure completed code logic is complete and directly usable\n3. **Context Understanding**: Provide relevant code suggestions based on current file context\n4. **Variable Consistency**: Use existing variable and function naming styles from the file\n5. **Real-time Optimization**: Perform basic code optimization while completing\n\n## 3. Error Handling and Quality\n\n1. **Basic Error Handling**: Include necessary try-catch blocks or conditional checks\n2. **Boundary Conditions**: Consider common edge cases (null, undefined, empty arrays, etc.)\n3. **Type Safety**: Provide appropriate type annotations in type-supported languages\n4. **Performance Considerations**: Avoid obvious performance issues (infinite loops, memory leaks, etc.)"
    },
    "testing": {
      "title": "驗測部署任務指南",
      "content": "# Cursor Programming Assistant Interaction Guidelines\n\n## 1. Basic Response Principles\n\n1. **Language Requirement**: Always respond and comment in Traditional Chinese (繁體中文)\n2. **Code Comments**: Add Traditional Chinese (繁體中文) comments to important code lines explaining functionality\n3. **Direct Implementation**: Provide complete functional implementations, avoid using TODO or placeholders\n4. **Real Data**: Use actual variable and function names from the project, no fake data\n5. **Real-time Response**: Work with Cursor's instant completion features to provide quick and accurate suggestions\n\n## 2. Code Completion and Suggestions\n\n1. **Complete Functions**: Provide complete function implementations rather than partial code snippets\n2. **Logic Completeness**: Ensure completed code logic is complete and directly usable\n3. **Context Understanding**: Provide relevant code suggestions based on current file context\n4. **Variable Consistency**: Use existing variable and function naming styles from the file\n5. **Real-time Optimization**: Perform basic code optimization while completing\n\n## 3. Error Handling and Quality\n\n1. **Basic Error Handling**: Include necessary try-catch blocks or conditional checks\n2. **Boundary Conditions**: Consider common edge cases (null, undefined, empty arrays, etc.)\n3. **Type Safety**: Provide appropriate type annotations in type-supported languages\n4. **Performance Considerations**: Avoid obvious performance issues (infinite loops, memory leaks, etc.)"
    }
  }
}