{
  "taskTemplates": {
    "frontend": {
      "title": "前端開發任務指南",
      "content": "# 前端開發任務指南\n\n## 1. 基本回應原則\n1. **語言要求**：始終使用繁體中文（Traditional Chinese）回應和註解\n2. **程式碼註解**：為重要的UI邏輯、事件處理和組件生命週期添加繁體中文註解說明功能\n3. **直接實作**：提供完整UI組件實作，避免使用 TODO 或佔位符\n4. **真實資料**：使用專案中的實際API端點、組件名稱和狀態變數，不使用假資料\n5. **即時回應**：配合 Cursor 的即時補全特性，提供快速且準確的前端開發建議\n\n## 2. 程式碼補全與建議\n1. **完整組件**：提供完整的React/Vue/Angular組件實作而非部分程式碼片段\n2. **邏輯完整性**：確保組件邏輯、狀態管理和事件處理完整且可直接使用\n3. **上下文理解**：根據當前組件的props、state和上下文提供相關的程式碼建議\n4. **變數一致性**：使用檔案中已存在的組件命名風格和狀態管理模式\n5. **即時優化**：在補全時同步進行基本的渲染效能優化和代碼分割\n\n## 3. 錯誤處理與品質\n1. **UI錯誤處理**：包含必要的 Error Boundary、loading狀態和fallback UI\n2. **邊界條件**：考慮常見的前端邊界情況（空資料、網路錯誤、載入狀態等）\n3. **型別安全**：在TypeScript專案中提供完整的interface和型別註解\n4. **效能考量**：避免明顯的效能問題（不必要的re-render、記憶體洩漏、過大bundle等）\n\n## 4. 程式碼風格與一致性\n1. **專案風格**：遵循當前專案的JSX/模板語法、CSS-in-JS或樣式框架慣例\n2. **簡潔明瞭**：保持組件邏輯簡潔，適當拆分大型組件\n3. **可讀性**：優先考慮組件的可讀性、可重用性和維護性\n4. **現有模式**：使用專案中已建立的設計系統、UI庫和狀態管理模式\n\n## 5. 特定優化\n1. **快速補全**：提供適合即時補全的組件程式碼片段和Hook邏輯\n2. **上下文感知**：充分利用組件樹和props流向的上下文分析能力\n3. **漸進式建議**：從簡單UI到複雜互動組件的程式碼建議層次\n4. **多行補全**：支援多行JSX/模板和複雜狀態邏輯的智慧補全\n5. **重構建議**：提供適合的組件重構、性能優化和架構改進建議\n\n## 6. 實用指導原則\n1. **立即可用**：確保所有建議的組件程式碼都可以立即在瀏覽器中渲染\n2. **語法正確**：保證所有JSX/模板語法和JavaScript/TypeScript語法完全正確\n3. **邏輯合理**：組件邏輯符合React/Vue/Angular等框架的最佳實踐\n4. **用戶體驗**：考慮載入速度、響應式設計和無障礙性等UX因素\n\n## 使用建議\n### 最佳實踐：\n1. **組件註解觸發**：\n```javascript\n// 實作用戶資料展示卡片組件 - 包含載入狀態和錯誤處理\nconst UserCard = ({ userId, onEdit }) => {\n    // 用戶資料狀態管理和API調用邏輯\n}\n```\n\n2. **Hook補全**：\n```typescript\nconst useUserData = (userId: string) => {\n    // 實作用戶資料獲取Hook，包含快取和錯誤處理\n}\n```\n\n3. **樣式修復**：\n```css\n/* 修復響應式佈局問題並加上繁體中文註解 */\n.user-card {\n    /* 卡片樣式定義 */\n}\n```\n\n### 常用提示詞模式：\n1. **組件實作**：「實作[組件名稱]組件，包含響應式設計和狀態管理，添加繁體中文註解」\n2. **性能優化**：「優化這個組件的渲染效能並添加載入狀態說明」\n3. **錯誤修復**：「修復這個組件的TypeScript錯誤並解釋修改原因」\n4. **重構建議**：「重構這個組件使其更符合React最佳實踐並提升可重用性」"
    },
    "backend": {
      "title": "後端開發任務指南",
      "content": "# 後端開發任務指南\n\n## 1. 基本回應原則\n1. **語言要求**：始終使用繁體中文（Traditional Chinese）回應和註解\n2. **程式碼註解**：為重要的業務邏輯、API端點和資料庫操作添加繁體中文註解說明功能\n3. **直接實作**：提供完整功能實作，避免使用 TODO 或佔位符\n4. **真實資料**：使用專案中的實際變數、模型名稱和API路由，不使用假資料\n5. **即時回應**：配合 Cursor 的即時補全特性，提供快速且準確的後端開發建議\n\n## 2. 程式碼補全與建議\n1. **完整API**：提供完整的API路由、控制器和服務層實作而非部分程式碼片段\n2. **邏輯完整性**：確保業務邏輯、資料驗證和回應處理完整且可直接使用\n3. **上下文理解**：根據當前專案的架構模式和資料庫設計提供相關建議\n4. **變數一致性**：使用專案中已存在的命名慣例和設計模式\n5. **即時優化**：在補全時同步進行基本的查詢優化和安全性檢查\n\n## 3. 錯誤處理與品質\n1. **API錯誤處理**：包含必要的 try-catch、HTTP狀態碼和錯誤回應格式\n2. **邊界條件**：考慮常見的後端邊界情況（null、undefined、空陣列、無效輸入等）\n3. **型別安全**：在支援型別的語言中提供適當的型別註解和介面定義\n4. **效能考量**：避免明顯的效能問題（N+1查詢、記憶體洩漏、阻塞操作等）\n\n## 4. 程式碼風格與一致性\n1. **專案風格**：遵循當前專案的縮排、命名和API設計慣例\n2. **簡潔明瞭**：保持業務邏輯簡潔，適當分離關注點\n3. **可讀性**：優先考慮程式碼的可讀性、可測試性和維護性\n4. **現有模式**：使用專案中已建立的架構模式（MVC、DDD、微服務等）\n\n## 5. 特定優化\n1. **快速補全**：提供適合即時補全的API端點和業務邏輯程式碼片段\n2. **上下文感知**：充分利用專案架構和資料庫schema的上下文分析能力\n3. **漸進式建議**：從簡單CRUD到複雜業務邏輯的程式碼建議層次\n4. **多行補全**：支援多行業務邏輯和複雜查詢的智慧補全\n5. **重構建議**：提供適合的程式碼重構、性能調優和架構改進建議\n\n## 6. 實用指導原則\n1. **立即可用**：確保所有建議的API程式碼都可以立即運行並通過測試\n2. **語法正確**：保證所有程式碼語法完全正確且符合語言規範\n3. **邏輯合理**：業務邏輯符合領域需求和資料一致性原則\n4. **安全考量**：避免明顯的安全漏洞（SQL注入、XSS、認證繞過等）\n\n## 使用建議\n### 最佳實踐：\n1. **API註解觸發**：\n```javascript\n// 實作用戶登入驗證API - 包含JWT生成和錯誤處理\napp.post('/api/auth/login', async (req, res) => {\n    // 驗證用戶憑證並回傳訪問令牌\n});\n```\n\n2. **服務層補全**：\n```python\ndef calculate_discount(price, discount_rate, user_tier):\n    # 計算用戶折扣價格，包含會員等級驗證和輸入檢查\n```\n\n3. **資料庫操作修復**：\n```typescript\n// 修復這個查詢的N+1問題並加上繁體中文註解\nconst getUsersWithPosts = async () => {\n    // 優化後的用戶和文章關聯查詢\n}\n```\n\n### 常用提示詞模式：\n1. **功能實作**：「實作[API名稱]，包含參數驗證、業務邏輯和錯誤處理，添加繁體中文註解」\n2. **程式碼優化**：「優化這段資料庫查詢的效能並添加快取機制說明」\n3. **錯誤修復**：「修復這個API的安全漏洞並解釋修改原因」\n4. **重構建議**：「重構這個服務使其更符合SOLID原則並提升可測試性」"
    },
    "fullstack": {
      "title": "全端開發任務指南",
      "content": "# 全端開發任務指南\n\n## 1. 基本回應原則\n1. **語言要求**：始終使用繁體中文（Traditional Chinese）回應和註解\n2. **程式碼註解**：為前後端整合點、資料流轉和API通訊添加詳細的繁體中文註解說明\n3. **直接實作**：提供完整的端到端功能實作，避免使用 TODO 或佔位符\n4. **真實資料**：使用專案中的實際API contract、資料模型和狀態管理，不使用假資料\n5. **即時回應**：配合 Cursor 的即時補全特性，提供快速且準確的全端整合建議\n\n## 2. 程式碼補全與建議\n1. **完整流程**：提供完整的前端組件+後端API+資料庫操作的端到端實作\n2. **邏輯完整性**：確保前後端資料流、狀態同步和錯誤處理邏輯完整且可直接使用\n3. **上下文理解**：根據整體系統架構和技術棧提供相關的整合建議\n4. **一致性維護**：確保前後端的命名慣例、資料格式和API設計保持一致\n5. **即時優化**：在補全時同步考慮前後端效能、快取策略和網路優化\n\n## 3. 錯誤處理與品質\n1. **端到端錯誤處理**：包含前端UI錯誤、網路異常、後端業務邏輯錯誤的完整處理鏈\n2. **邊界條件**：考慮前後端交互中的各種邊界情況（網路中斷、超時、資料不一致等）\n3. **型別安全**：提供前後端共享的型別定義和資料模型驗證\n4. **效能考量**：避免前後端交互中的效能問題（過度請求、資料冗餘、同步阻塞等）\n\n## 4. 程式碼風格與一致性\n1. **專案風格**：遵循前後端統一的縮排、命名和架構設計慣例\n2. **簡潔明瞭**：保持端到端邏輯簡潔，適當抽象共同關注點\n3. **可讀性**：優先考慮整個資料流的可讀性、可追蹤性和維護性\n4. **現有模式**：使用專案中已建立的前後端整合模式和通訊協定\n\n## 5. 特定優化\n1. **快速補全**：提供適合即時補全的全端功能程式碼片段和整合邏輯\n2. **上下文感知**：充分利用前後端架構和資料流的上下文分析能力\n3. **漸進式建議**：從簡單資料展示到複雜業務流程的程式碼建議層次\n4. **多層補全**：支援跨前後端多層次程式碼的智慧補全和同步更新\n5. **重構建議**：提供適合的全端重構、架構演進和技術債務清理建議\n\n## 6. 實用指導原則\n1. **立即可用**：確保所有建議的全端程式碼都可以立即運行並完成完整業務流程\n2. **語法正確**：保證前後端程式碼語法完全正確且相互兼容\n3. **邏輯合理**：端到端邏輯符合業務需求和系統架構原則\n4. **整合安全**：考慮前後端整合中的安全問題（認證傳遞、資料驗證、CORS等）\n\n## 使用建議\n### 最佳實踐：\n1. **全端功能註解觸發**：\n```typescript\n// 實作完整的用戶註冊流程 - 前端表單+後端API+郵件驗證\ninterface UserRegistrationFlow {\n    // 前端註冊表單組件\n    frontend: RegistrationForm;\n    // 後端用戶創建API\n    backend: UserCreationAPI;\n    // 郵件服務整合\n    notification: EmailService;\n}\n```\n\n2. **資料流補全**：\n```javascript\n// 實作商品購買完整流程，包含庫存檢查和支付處理\nconst purchaseWorkflow = {\n    // 前端購物車邏輯\n    cart: () => {},\n    // 後端訂單處理\n    order: () => {},\n    // 支付系統整合\n    payment: () => {}\n};\n```\n\n3. **API整合修復**：\n```python\n# 修復前後端資料格式不一致問題並統一型別定義\n@dataclass\nclass UserResponse:\n    # 前後端共享的用戶資料模型\n```\n\n### 常用提示詞模式：\n1. **功能實作**：「實作[功能名稱]完整流程，包含前端UI、後端API和資料庫操作，添加繁體中文註解」\n2. **整合優化**：「優化前後端資料同步效能並添加離線支援說明」\n3. **錯誤修復**：「修復前後端資料格式不匹配問題並解釋統一方案」\n4. **重構建議**：「重構這個全端功能使其更符合微服務架構並提升可擴展性」"
    },
    "testing": {
      "title": "測試與部署任務指南",
      "content": "# 測試與部署任務指南\n\n## 1. 基本回應原則\n1. **語言要求**：始終使用繁體中文（Traditional Chinese）回應和註解\n2. **程式碼註解**：為測試案例、部署腳本和監控配置添加詳細的繁體中文註解說明\n3. **直接實作**：提供完整的測試和部署配置，避免使用 TODO 或佔位符\n4. **真實資料**：使用專案中的實際環境變數、服務名稱和部署目標，不使用假資料\n5. **即時回應**：配合 Cursor 的即時補全特性，提供快速且準確的DevOps建議\n\n## 2. 程式碼補全與建議\n1. **完整流程**：提供完整的測試套件、CI/CD管道和部署腳本而非部分配置片段\n2. **邏輯完整性**：確保測試覆蓋、建置流程和部署策略邏輯完整且可直接執行\n3. **上下文理解**：根據當前專案的技術棧和基礎設施提供相關的DevOps建議\n4. **變數一致性**：使用專案中已存在的環境配置和服務命名慣例\n5. **即時優化**：在補全時同步進行基本的測試效能和部署安全性優化\n\n## 3. 錯誤處理與品質\n1. **測試錯誤處理**：包含必要的測試失敗處理、重試機制和報告生成\n2. **邊界條件**：考慮常見的測試和部署邊界情況（環境差異、資源限制、網路問題等）\n3. **配置安全**：在CI/CD配置中提供適當的密鑰管理和權限控制\n4. **效能考量**：避免明顯的測試和部署效能問題（過長建置時間、資源浪費等）\n\n## 4. 程式碼風格與一致性\n1. **專案風格**：遵循當前專案的測試命名、腳本格式和部署慣例\n2. **簡潔明瞭**：保持測試邏輯和部署腳本簡潔，適當模組化配置\n3. **可讀性**：優先考慮測試案例和部署流程的可讀性、可維護性和可追蹤性\n4. **現有模式**：使用專案中已建立的測試框架和部署工具鏈\n\n## 5. 特定優化\n1. **快速補全**：提供適合即時補全的測試案例和部署配置程式碼片段\n2. **上下文感知**：充分利用專案架構和基礎設施的上下文分析能力\n3. **漸進式建議**：從簡單單元測試到複雜E2E測試和多環境部署的建議層次\n4. **多階段補全**：支援多階段測試流程和複雜部署策略的智慧補全\n5. **重構建議**：提供適合的測試重構、CI/CD優化和基礎設施改進建議\n\n## 6. 實用指導原則\n1. **立即可用**：確保所有建議的測試和部署配置都可以立即執行並通過驗證\n2. **語法正確**：保證所有配置文件語法完全正確且符合工具規範\n3. **邏輯合理**：測試策略和部署流程符合專案需求和最佳實踐\n4. **安全考量**：避免明顯的安全漏洞（密鑰洩漏、權限過度、未加密傳輸等）\n\n## 使用建議\n### 最佳實踐：\n1. **測試註解觸發**：\n```javascript\n// 實作用戶登入功能完整測試套件 - 包含單元測試、整合測試和E2E測試\ndescribe('用戶登入功能測試', () => {\n    // 測試用戶認證流程的各種情境\n});\n```\n\n2. **部署腳本補全**：\n```yaml\n# 實作生產環境自動部署流程，包含健康檢查和回滾機制\nname: 生產部署管道\non:\n  push:\n    branches: [main]\njobs:\n  # 建置、測試、部署各階段配置\n```\n\n3. **監控配置修復**：\n```dockerfile\n# 修復Docker容器監控配置並加上繁體中文註解\nFROM node:18-alpine\n# 應用程式容器化配置和健康檢查\n```\n\n### 常用提示詞模式：\n1. **測試實作**：「實作[功能名稱]完整測試套件，包含單元測試、整合測試和效能測試，添加繁體中文註解」\n2. **部署優化**：「優化這個CI/CD流程的執行效率並添加失敗通知機制說明」\n3. **錯誤修復**：「修復這個部署腳本的權限問題並解釋安全配置」\n4. **重構建議**：「重構這個測試套件使其更符合測試金字塔原則並提升執行速度」"
    }
  }
}